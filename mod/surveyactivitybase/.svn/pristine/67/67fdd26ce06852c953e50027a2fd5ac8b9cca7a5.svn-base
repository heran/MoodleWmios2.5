<?php
namespace wmios\survey {

    use \MoodleQuickForm,\moodle_url,\stdClass;
    require_once($CFG->dirroot.'/mod/surveyactivitybase/lib/survey_client.php');
    require_once($CFG->dirroot.'/mod/surveyactivitybase/lib.php');
    require_once(dirname(__FILE__).'/locallib.php');
    require_once($CFG->dirroot.'/mod/surveyactivitybase/lib/fpdf/fpdf.php');
    require_once($CFG->dirroot.'/mod/surveyactivitybase/lib/pchart/pData.class.php');
    require_once($CFG->dirroot.'/mod/surveyactivitybase/lib/pchart/pChart.class.php');

    define('FPDF_FONTPATH','font/');
    class activity_employengage extends activity{
        protected $_instance = null;

        public static function extend_nav(\navigation_node $nav, activity_wrapper $wrapper = null)
        {
            return true;
        }

        /**
        * 判断是否完成调查
        * @return bool
        */
        public function check_complete()
        {
            global $DB;
            $status = $this->get_instance()->status;
            $endtime = $this->_wrapper->endtime;

            if($status == activity_employengage_instance::STATUS_EMPLOYENGAGE_COMPLETE )
            {
                return true;    
            }
            elseif ($status == activity_employengage_instance::STATUS_EMPLOYENGAGE_UNCOMPLETE)
            {

                $reportsdata = $this->get_reportsdata();  
                if(!$reportsdata)
                {
                   // $this->get_instance()->status = activity_employengage_instance::STATUS_EMPLOYENGAGE_WRONG;
                  //  $this->get_instance()->save();
                    return false;

                } 

                if($endtime < time())
                {
                    //更新status
                    $this->get_instance()->status = activity_employengage_instance::STATUS_EMPLOYENGAGE_COMPLETE;
                    if($this->get_instance()->save())
                    {
                        return true;
                    }else{
                        throw new \moodle_exception("wrong");
                    }

                }elseif ($endtime > time())
                {

                    $ct = $DB->get_field_sql('select COUNT(`status`) from {surveyactivity_employ_users} where `surveyid`='.$this->get_instance()->survey_id.' and `status`= 1');
                    if($ct>0)
                    {
                        $this->get_instance()->status = activity_employengage_instance::STATUS_EMPLOYENGAGE_COMPLETE;
                        if($this->get_instance()->save())
                        {
                            return true;
                        }else
                        {
                            throw new \moodle_exception("wrong");
                        }

                    }else{
                        return false;
                    }

                }

            }
            elseif ($status == activity_employengage_instance::STATUS_EMPLOYENGAGE_WRONG) 
            {

                throw new \moodle_exception("wrong");
            }

        }

        public static function process_update_form(MoodleQuickForm $mform,activity_wrapper $activity_wrapper = null)
        {
            if(!$activity_wrapper || $activity_wrapper->is_new())
            {
                $filepickeroptions = array('accepted_types' => '.csv','return_types'=>FILE_INTERNAL);
                $mform->addElement('filepicker','userfile',get_string('userfile',SURVEYACTIVITYBASE_PLUGIN_NAME), null,$filepickeroptions);

            }
        }

        public static function get_add_instance_default_data(){
            return array();
        }

        /**
        * @return activity_employengage_instance
        * 
        */
        public function get_instance()
        {
            if($this->_instance == null)
            {
                $this->_instance = activity_employengage_instance::instance_from_id($this->_wrapper->instance_id);
            } 
            return $this->_instance;
        }

        /**
        * @return  activity_employengage_users_instance
        * 
        */
        public function get_usersinstance()
        {
            if($this->_instance == null)
            {
                $this->_instance = activity_employengage_users_instance::instance_from_id($this->_wrapper->instance_id);
            } 
            return $this->_instance;
        }

        public static function add_instance(stdClass $general, stdClass $special, moodleform_activity $mform)
        {
            global $DB, $CFG;
            $users = self::process_survey_users_from_userfile($mform, true);

            $url = get_config(SURVEYACTIVITYBASE_PLUGIN_NAME,'uri');
            $username = get_config(SURVEYACTIVITYBASE_PLUGIN_NAME,'username');
            $password = get_config(SURVEYACTIVITYBASE_PLUGIN_NAME,'password');


            $surveyclient = new \survey_client($url,$username,$password);
            $file = $CFG->dirroot.'/mod/surveyactivitybase/activity/employengage/file/limesurvey_survey.lss';
            $type = 'lss';
            $name = 'mytests';

            $new_survey_id = $surveyclient->copy_survey($file,$type,$name);
            if($new_survey_id)
            {
                if($surveyclient->init_tokens($new_survey_id))
                {
                    $arr = array();
                    $us = array();
                    foreach($users as $d)
                    {
                        $arr['email'] = $d['email'];
                        $arr['firstname'] = $d['firstname'];
                        $arr['lastname'] = $d['lastname'];
                        $arr['token'] = $d['token'];

                        $us[] = $arr;
                    }
                    if($cheng=$surveyclient->add_usersurvey($new_survey_id,$us))
                    {

                        foreach($us as $data)
                        {
                            $data['surveyid'] = $new_survey_id;
                            $userinstance = new activity_employengage_users_instance($data);

                            $bool=$userinstance->save();
                            if(!$bool)
                            {
                                throw new \moodle_exception("wrong");
                            }
                        }
                    }
                    else
                    {
                        throw new \moodle_exception("wrong");
                    }
                }
                else
                {
                    throw new \moodle_exception("wrong");

                }

                $data = array('survey_id'=>$new_survey_id);
                $instance = new activity_employengage_instance($data);
                $instance->save();
                return $instance->id;

            }
            else
            {
                throw new \moodle_exception("wrong");

            }

        }

        public function update_instance(stdClass $general, stdClass $special, moodleform_activity $mform){
            if($this->_wrapper->is_new())
            {
                $users = self::process_survey_users_from_userfile($mform, false);
                if($users)
                {
                    //push users to survey server.
                }
                //post the date time ,survey name, survey intro,users to server.
                //get the result ,return the result,true or false.
                //throw exception
            }
            return true;
        }

        protected static function process_survey_users_from_userfile(moodleform_activity $mform, $force = false)
        {
            $users = array();

            $userfile = $mform->get_file_content('userfile');
            if(!strlen($userfile))
            {
                if($force)
                {
                    throw new \Exception('user file need content 1');
                }else{
                    return $users;
                }
            }

            $lines = explode("\n",$userfile);
            if(count($lines)<2)
            {
                if($force)
                {
                    throw new \Exception('user file need content 2');
                }else{
                    return $users;
                }
            }
            $ks = explode(',',trim($lines[0],"\r\n, "));
            for($i=1;$i<count($lines);$i++)
            {
                if($lines[$i] == "")continue;
                $user = array();
                $vs = explode(',', trim($lines[$i],"\r"));
                foreach($vs as $k=> $v)
                {
                    $user[trim($ks[$k],"'\n\" ")] = trim($v,"'\n\" ");
                }
                $users[] = $user;
            }
            return $users;
        }

        public function survey_reports($userfile, $force = false)
        {

            $users = array();

            // $userfile = $mform->get_file_content('userfile');

            if(!strlen($userfile))
            {
                if($force)
                {
                    throw new \Exception('user file need content 1');
                }else{
                    return $users;
                }
            }

            $lines = explode("\n",$userfile);
            if(count($lines)<2)
            {
                if($force)
                {
                    throw new \Exception('user file need content 2');
                }else{
                    return $users;
                }
            }
            $ks = explode(',',trim($lines[0],"\r\n, "));
            for($i=1;$i<count($lines);$i++)
            {
                if($lines[$i] == "")continue;
                $user = array();
                $vs = explode(',', trim($lines[$i],"\r"));
                foreach($vs as $k=> $v)
                {
                    $user[trim($ks[$k],"'\n\" ")] = trim($v,"'\n\" ");
                }
                $users[] = $user;
            }
            return $users;

        }

        public static function delete_instance($id){
            return true;
        }

        public function get_update_instance_data(){
            return array('dd'=>time());
        }

        public function get_view_url(){
            return new moodle_url('/mod/surveyactivitybase/activity/employengage/detail.php',array('id'=>$this->_wrapper->id,'cmid'=>$this->_wrapper->cmid));
        }

        /**
        *
        * True if this type has a global report.
        *
        * @return bool
        *
        */
        public function has_global_report()
        {
            return true;
        }

        public function start()
        {
            //start survey
            $url = get_config(SURVEYACTIVITYBASE_PLUGIN_NAME,'uri');
            $username = get_config(SURVEYACTIVITYBASE_PLUGIN_NAME,'username');
            $password = get_config(SURVEYACTIVITYBASE_PLUGIN_NAME,'password');

            $surveyclient= new \survey_client($url,$username,$password);

            $surveyid = $this->get_instance()->survey_id;
            //$surveyclient->active_survey($surveyid);
            $active = $surveyclient->active_survey($surveyid);

            if($active)
            {
                $access=$surveyclient->invite_users($surveyid);

                if($access)
                {
                    return true;  

                }
            }else{

                return false;
            }

        }


        public function stop()
        {
            //stop survey
            return true;
        }


        public function get_global_report_view_url()
        {


        }


        public function get_global_report_download_url()
        {



        }

        /**
        * 调查报告的信息存到数据库
        * 
        * @param mixed $data
        * @return static
        */
        public function activity_instance_updates($data)
        {
            $str = $data['操作代码'];
            $query = "token ='".$str."'";
            $rowobj = activity_employengage_users_instance::instance_from_select($query);

            unset($data['id']);
            return $rowobj->setFields($data)->save();
        }       

        /**
        * 调查报告的计算分数
        * 
        * @param mixed $arr
        * @return array[][]
        */
        public function reports_results($arr)
        {
            $summary = array();
            $sum = array();
            $statics = array();
            $avg = array();
            $count = count($arr);
            foreach($arr as $d)
            {
                foreach($d as $k=>$v)
                {
                    if(!isset($sum[$k]))
                    {
                        $sum[$k] = 0;    
                    }
                    if(preg_match('/^q\d*/',$k,$matches))
                    {
                        foreach($matches as $key)
                        {
                            switch($d[$key])
                            {
                                case 1:$v = "5"; break;
                                case 2:$v = "4"; break;
                                case 3:$v = "3"; break;
                                case 4:$v = "2"; break;
                                case 5:$v = "1"; break;

                            }

                        }

                    }
                    $sum[$k] += $v;
                }
                $newk = sprintf('%.1f',$d['averages']);

                if(!isset($statics[$newk]))
                {
                    $statics[$newk] = 0;
                }

                $statics[$newk]++;
            }
            foreach($sum as $keys=>$vs)
            {
                $avg[$keys] = $vs/$count;
            }

            if(count($avg)>0)
            {
                $summary['avg'] = $avg;
            }
            if(count($statics)>0)
            {
                $summary['statics'] = $statics;
            }

            return $summary;
        }

        /**
        * 按条件查询调查报告
        * 
        * @param mixed $str
        * @return array[][]
        */
        public function users_reports($str=null)
        {
            $rows = array();
            $query = "surveyid ='".$this->get_instance()->survey_id."' ";
            if($str)
            {
                $query.=' and '.$str;
            }
            $rowarr = activity_employengage_users_instance::instances_from_select($query);
            if($rowarr)
            {
                foreach($rowarr as $dataobj)
                {
                    $rows[] = $dataobj->getFields();
                } 

            } 
            return $rows;

        }

        /**
        * 获取性别为男或女
        * @return array()
        */
        public function get_genders()
        {
            $rows = array();
            global $DB;
            $records = $DB->get_records_sql('select DISTINCT gender from {surveyactivity_employ_users} where `surveyid`='.$this->get_instance()->survey_id);

            foreach($records as $k =>$v)
            {
                $rows[]=$k;
            }
            return $rows;

        }

        /**
        * 部门查询
        * 
        * @param mixed $records array()
        * @return array
        */
        public function check_department($records)
        {
            foreach($records as $record)
            {
                foreach(array('one','two','three','four','five','six','seven','eight','nine','ten') as $i)
                {
                    $k = 'dplevel_'.$i;
                    if(empty($record[$k]))
                    {
                        break;
                    }
                    $cmd = '$dim2s';
                    foreach(array('one','two','three','four','five','six','seven','eight','nine','ten') as $j)
                    {              
                        $cmd .= '[\''.$record['dplevel_'.$j].'\']';
                        if($i == $j)
                        {
                            break;
                        }
                    }
                    eval(
                        'if(!isset('.$cmd.'))
                        {
                        '.$cmd.'=array();
                        }'
                    );

                }
            }
            return $dim2s;
        }

        /**
        * 地区查询
        * 
        * @param mixed $records array()
        * @return array
        */
        public function check_provinces($records)
        {  
            foreach($records as $record)
            {
                $city[] = $record['city'];         

                foreach($city as $v)
                {
                    $k = $record['provinces'];
                    if(empty($k))
                    {
                        break;
                    }
                    if($v == $record['city'])
                    {
                        $rows[$k][$v] = array();
                    }

                }
            }
            return $rows;
        }

        /**
        * 生成bar图表
        * 
        * @param mixed $arrbar
        * @param mixed $param
        * @param mixed $param2
        * @return \stored_file
        */
        public function check_chartbar($arrbar,$param,$param2)
        {
            global $CFG;

            $pathes = array($this->get_instance()->survey_id, $param);


            if(!empty($param2))
            {
                if(!is_array($param2))
                {
                    $param2 = array($param2);
                }
                $pathes = array_merge($pathes,$param2);
            }
            $filepath = '/'.implode('/',$pathes).'/';

            $filename = 'bar.png';

            $fs = get_file_storage();

            $fileinfo = array(
                'contextid' => $this->_wrapper->get_base()->get_context()->id, // ID of context
                'component' => 'surveyactivity_employengage',     // usually = table name
                'filearea' => 'report',     // usually = table name
                'itemid' => 0,               // usually = ID of row in table
                'filepath' => $filepath,           // any path beginning and ending in /
                'filename' => $filename); // any filename
            $file = $fs->get_file($fileinfo['contextid'], $fileinfo['component'], $fileinfo['filearea'],$fileinfo['itemid'],$fileinfo['filepath'], $fileinfo['filename']);
            if($file !== false )
            {
                return $file;
            }

            // Dataset definition 
            $DataSet = new \pData;
            //图表数据
            foreach($arrbar as $k=>$v)
            {
                $DataSet->AddPoint(array($v),"Serie1");
                $DataSet->AddPoint(array($k),"Serie2");

            }

            //取到人数最大值
            /*
            $max=0;
            $arrs = array_values($arrbar);
            foreach($arrs as $arr)
            {
            $max = max($max,$arr);
            }
            */
            $DataSet->AddSerie();
            $DataSet->SetAbsciseLabelSerie("Serie2");//设置X轴的值
            //数据图例
            //$DataSet->SetSerieName("人数","Serie1");
            //$DataSet->SetSerieName("IBM","Serie2");
            //$DataSet->SetSerieName("Google","Serie3");
            //X轴
            $DataSet->SetXAxisUnit("分");  
            //Y轴
            // $DataSet->SetYAxisUnit("人");
            //$DataSet->SetYAxisFormat("metric");
            $DataSet->SetYAxisName("人数");
            // Initialise the graph
            $bar = new \pChart(700,230);
            //设置图表尺寸、样式
            $bar->setFontProperties("Fonts/simhei.ttf",8);
            $bar->setGraphArea(50,30,680,200);
            //$Test->setFixedScale(0,$max);//设置Y轴人数数值  pchartclass/$Divisions分段 
            $bar->drawFilledRoundedRectangle(7,7,693,223,5,240,240,240);
            $bar->drawRoundedRectangle(5,5,695,225,5,230,230,230);
            $bar->drawGraphArea(255,255,255,TRUE);
            //X轴、Y轴字体的颜色
            $bar->drawScale($DataSet->GetData(),$DataSet->GetDataDescription(),SCALE_NORMAL,150,150,150,TRUE,0,2,TRUE);
            $bar->drawGrid(4,TRUE,230,230,230,50);
            // Draw the 0 line
            $bar->setFontProperties("Fonts/simhei.ttf",6);
            $bar->drawTreshold(0,143,55,72,TRUE,TRUE);
            // Draw the bar graph
            //柱状图要使用drawBarGraph()
            $bar->drawBarGraph($DataSet->GetData(),$DataSet->GetDataDescription(),TRUE,80);
            $bar->setColorPalette(0,133,133,133);//人数颜色
            // Finish the graph
            //制作图例、标题、字体等属性
            $bar->setFontProperties("Fonts/simhei.ttf",10);
            //$Test->drawLegend(596,150,$DataSet->GetDataDescription(),255,255,255);

            //$Test->drawTitle(50,22,"Example",50,50,50,585);

            //写值
            $bar->writeValues($DataSet->GetData(),$DataSet->GetDataDescription(),array("Serie1"));

            //生成图表
            $bar_tmp_dir = $CFG->tempdir.'/picture/';
            if(!is_dir($bar_tmp_dir))
            {
                mkdir($bar_tmp_dir);     
            }

            $imageFile = $bar_tmp_dir.$filename; 

            $bar->Render($imageFile); 

            // Create file containing text 'hello world'
            return $fs->create_file_from_pathname($fileinfo, $imageFile);

        }

        /**
        * 生成radar图
        * 
        * @param mixed $namearr
        * @param mixed $arr
        * @param mixed $param
        * @param mixed $param2
        * @return \stored_file
        */
        public function check_chartradar($namearr,$arr,$param,$param2)
        {
            global $CFG;

            $pathes = array($this->get_instance()->survey_id, $param);


            if(!empty($param2))
            {
                if(!is_array($param2))
                {
                    $param2 = array($param2);
                }
                $pathes = array_merge($pathes,$param2);
            }
            $filepath = '/'.implode('/',$pathes).'/';

            $filename = 'radar.png';

            $fs = get_file_storage();

            $fileinfo = array(
                'contextid' => $this->_wrapper->get_base()->get_context()->id, // ID of context
                'component' => 'surveyactivity_employengage',     // usually = table name
                'filearea' => 'report',     // usually = table name
                'itemid' => 0,               // usually = ID of row in table
                'filepath' => $filepath,           // any path beginning and ending in /
                'filename' => $filename); // any filename
            $file = $fs->get_file($fileinfo['contextid'], $fileinfo['component'], $fileinfo['filearea'],$fileinfo['itemid'],$fileinfo['filepath'], $fileinfo['filename']);
            if($file !== false )
            {
                return $file;
            }

            $DataSet = new \pData;
            foreach($namearr as $name)
            {
                $DataSet->AddPoint($name,"Label");
            }  

            foreach($arr as $data)
            {
                $DataSet->AddPoint($data,"Serie1");
            }
            // $DataSet->AddPoint(array(2,3,5,2,4),"Serie2");
            $DataSet->AddSerie("Serie1");
            //$DataSet->AddSerie("Serie2");
            $DataSet->SetAbsciseLabelSerie("Label");
            //$DataSet->SetSerieName("Reference","Serie1");右上角两个标签
            //$DataSet->SetSerieName("Tested computer","Serie2");

            // Initialise the graph
            $radar = new \pChart(400,400);

            $radar->setFontProperties("Fonts/simhei.ttf",8);
            $radar->drawFilledRoundedRectangle(7,7,393,393,5,240,240,240);
            $radar->drawRoundedRectangle(5,5,395,395,5,230,230,230);
            $radar->setGraphArea(30,30,370,370);
            $radar->drawFilledRoundedRectangle(30,30,370,370,5,255,255,255);
            $radar->drawRoundedRectangle(30,30,370,370,5,220,220,220);

            // Draw the radar graph
            //要使用drawRadarAxis()生成雷达效果
            $radar->drawRadarAxis($DataSet->GetData(),$DataSet->GetDataDescription(),TRUE,20,120,120,120,230);
            $radar->drawFilledRadar($DataSet->GetData(),$DataSet->GetDataDescription(),50,20);

            // Finish the graph
            //$Test->drawLegend(15,15,$DataSet->GetDataDescription(),255,255,255);图标
            $radar->setFontProperties("Fonts/tahoma.ttf",10);
            //$Test->drawTitle(0,22,"biaoti",50,50,50,400);标题

            //生成图表

            $radar_tmp_dir = $CFG->tempdir.'/picture/';
            if(!is_dir($radar_tmp_dir))
            {
                mkdir($radar_tmp_dir);     
            }

            $imageFile = $radar_tmp_dir.$filename; 

            $radar->Render($imageFile); 


            return $fs->create_file_from_pathname($fileinfo, $imageFile);
        }

        /**
        * 生成PDF
        * 
        * @param mixed $radars
        * @param mixed $bars
        * @param mixed $param
        * @param mixed $param2
        * @return \stored_file
        */
        public function check_reportspdf($radars,$bars,$param,$param2)
        {
            global $CFG;

            $pathes = array($this->get_instance()->survey_id, $param);

            if(!empty($param2))
            {
                if(!is_array($param2))
                {
                    $param2 = array($param2);
                }
                $pathes = array_merge($pathes,$param2);
            }
            $filepath = '/'.implode('/',$pathes).'/';
            $fname = implode('-',$pathes);
            $filename = $fname.'-reports.pdf';

            $fs = get_file_storage();

            $fileinfo = array(
                'contextid' => $this->_wrapper->get_base()->get_context()->id, 
                'component' => 'surveyactivity_employengage',    
                'filearea' => 'report',     
                'itemid' => 0,               
                'filepath' => $filepath,          
                'filename' => $filename);

            $file = $fs->get_file($fileinfo['contextid'], $fileinfo['component'], $fileinfo['filearea'],$fileinfo['itemid'],$fileinfo['filepath'], $fileinfo['filename']);

            if($file !== false )
            {
                return $file;
            }

            $pdfdir = $CFG->tempdir.'/pdf/';
            if(!is_dir($pdfdir))
            {
                mkdir($pdfdir);     
            }
            $imgdir = $CFG->tempdir.'/picture/';

            $pdf = new \FPDF('P','mm','A4'); 
            $pdf->Open();

            $pdf->AddPage();  
            $pdf->SetFont('Courier','I',20); 

            $pdf->Image($imgdir.$radars->get_filename(),50,20,100,80);
            $pdf->Image($imgdir.$bars->get_filename(),30,120,150,80);

            $filename = iconv('UTF-8','GB2312',$filename);

            $pdfpathname = $pdfdir.md5($filepath).$filename;

            $pdf->Output($pdfpathname,"F");

            return $fs->create_file_from_pathname($fileinfo, $pdfpathname);
        }

        /**
        * 从limesurvey获取整个调查报告csv文件
        * @return string
        */
        public function get_limesurveyreports()
        {
            $surveyr_text = '' ;
            $url = get_config(SURVEYACTIVITYBASE_PLUGIN_NAME,'uri');
            $username = get_config(SURVEYACTIVITYBASE_PLUGIN_NAME,'username');
            $password = get_config(SURVEYACTIVITYBASE_PLUGIN_NAME,'password');

            $surveyclient = new \survey_client($url,$username,$password);
            $surveyid = $this->get_instance()->survey_id;

            $doctype = "csv";
            $reportstext = $surveyclient->export_results($surveyid,$doctype);
            if(is_array($reportstext)){
                return $surveyr_text;
            }else{
                return $surveyr_text = base64_decode($reportstext);
            }

        }

        /**
        * 获取报告数据存入数据库
        * @return bool
        */
        public function get_reportsdata()
        {
            $bool = false;
            $surveyr_text = $this->get_limesurveyreports();
            if(!empty($surveyr_text))
            {
                $reports = $this->survey_reports($surveyr_text,true);
                foreach($reports as $data)
                {
                    $data['status'] = activity_employengage_instance::STATUS_EMPLOYENGAGE_COMPLETE;
                    $bool = $this->activity_instance_updates($data);

                }
            }

            return $bool;
        }

    }
}
namespace {

    /**
    * file serving callback
    *
    * 
    * @package  mod_surveyactivitybase_employengage
    * @category files
    * @param stdClass $course course object
    * @param stdClass $cm course module object
    * @param stdClass $context context object
    * @param string $filearea file area
    * @param array $args extra arguments
    * @param bool $forcedownload whether or not force download
    * @param array $options additional options affecting the file serving
    * @return bool false if the file was not found, just send the file otherwise and do not return anything
    */
    function surveyactivity_employengage_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload, array $options=array()) 
    {
        global $CFG;

        if ($context->contextlevel != CONTEXT_MODULE) {
            return false;
        }

        require_login($course, true, $cm);

        if ($filearea == 'report') {

            $relativepath = implode('/', $args);

            $fullpath = "/$context->id/surveyactivity_employengage/report/$relativepath";

            $fs = get_file_storage();
            if (!$file = $fs->get_file_by_hash(sha1($fullpath)) or $file->is_directory()) {
                return false;
            }

            $lifetime = isset($CFG->filelifetime) ? $CFG->filelifetime : 86400;

            send_stored_file($file, $lifetime, 0, $options);
        }
    }
}